# Cline's Project Intelligence: permit2-rpc-manager

This file captures key patterns, preferences, and insights for this project.

# Cline's Project Intelligence: permit2-rpc-manager (Monorepo)

This file captures key patterns, preferences, and insights for this project.

## Core Instructions & Preferences

- **Monorepo:** Project uses a monorepo structure with `packages/permit2-rpc-server` (Deno) and `packages/permit2-rpc-client` (JS/TS library).
- **Package Manager:** Use `bun install` at the root for installing client devDependencies and managing workspaces (if enabled).
- **Server Execution:** Use `deno task start` (or `dev`) within `packages/permit2-rpc-server` to run the Deno server. Requires `--unstable-kv`.
- **Client Build/Test:** Use `bun run build` and `bun test` within `packages/permit2-rpc-client`.
- **Environment:** Server uses Deno runtime. Client targets browser/Node.js/Bun. Assume `.env` is handled if needed.
- **File Naming:** Use `kebab-case.ts` for new files.
- **Linting:** Use `deno lint` for server, standard JS/TS linters for client (if configured). Do not fix ESLint errors unless asked.
- **File Length:** Keep TypeScript files under ~256 lines; refactor if longer.
- **Cleanup:** Delete unused files before completing tasks.
- **Documentation:** Maintain docs meticulously (`docs/`, root `README.md`, package `README.md`s). Read ALL docs at the start of each session. Use `update docs` command to trigger a full review and update cycle.

## Project-Specific Patterns

- **RPC Source:** Server uses `packages/permit2-rpc-server/rpc-whitelist.json`. Managed via root scripts (`whitelist:update`, `whitelist:test`).
- **Latency Testing (Server):** Testing involves `eth_getCode` (Permit2 bytecode, first 13995 bytes), `eth_syncing`, and basic latency checks. Detailed status (`ok`, `wrong_bytecode`, `syncing`, errors) is crucial.
- **RPC Selection (Server):** Prioritize RPCs: `ok` > `wrong_bytecode` > `syncing`. Within each tier, select the fastest based on latency. Exclude error statuses.
- **Caching (Server):** Uses **Deno KV** via `CacheManager`. Can be disabled for testing via `DISABLE_RPC_CACHE=true` env var passed to client tests (`test:client:local`). Requires `--unstable-kv` flag for server.
- **Server API:** Exposes `POST /rpc/{chainId}` endpoint, supports single and batch JSON-RPC requests. Handles CORS.
- **Client SDK:** Provides `createRpcClient({ baseUrl })` and `client.request(chainId, payload)` to interact with the server API. Built using `bun build`.
- **Dependencies:** Server has no external runtime dependencies. Client has no runtime dependencies. Native `fetch` is used in both. `viem` is *not* used in the server package.
